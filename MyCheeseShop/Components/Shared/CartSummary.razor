@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Model
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

@* table to display all the cheeses in the cart *@
<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Price</th>
            <th scope="col">Quantity</th>
            <th scope="col">Total</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ShoppingCart.GetItems())
        {
            @* adds a row for every cheese in the cart, providing its name, price, quantity and total *@
        <tr>
                <td scope="col">@item.Cheese.Name</td>
                <td scope="col">@item.Cheese.Price.ToString("C")</td>
                <td scope="col">@(item.Quantity * 100)g</td>
                <td scope="col">@item.Total.ToString("C")</td>
        </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    // Updates the cart when a new item is added to it
    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStore.SetAsync("cart", ShoppingCart.GetItems());
    }

    // Removes an item from the cart
    private void RemoveItem(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese);
    }
    
    // Allows the user to increase the quantity of an item in the cart
    private void IncreaseQuantity(CartItem item)
    {
        ShoppingCart.AddItem(item.Cheese, 1);
    }

    // Allows the user to decrease the quantity of am item in the cart
    private void DecreaseQuantity(CartItem item)
    {
        ShoppingCart.RemoveItem(item.Cheese, 1);
    }

}
