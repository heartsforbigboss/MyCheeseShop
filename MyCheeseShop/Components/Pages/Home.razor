@using MyCheeseShop.Components.Account.Shared
@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@inject CheeseProvider CheeseProvider
@inject NavigationManager NavigationManager
@inject ShoppingCart ShoppingCart
@page "/"

<PageTitle>Home</PageTitle>


<div class="card-body">
    <div class="d-grid gap-2">
        <span class="text-bg-primary w-100" style="font-size:40px; padding:10px; text-align:center"><b>CHEESE OUT! CHEESE SHOP</b></span>
    </div>
    <div class="mb-3" />
        <div class="row">
            <div class="col-md-10">
            <span class="badge text-primary-emphasis bg-primary-subtle border border-primary-subtle w-100" style="font-size:22px">🧀 Wonderful cheeses at wonderful prices!</span>
            </div>
            <div class="col-md-2">
            <div class="d-grid gap-2">
                <button class="btn text-primary-emphasis bg-primary-subtle border border-primary-subtle" type="button" @onclick=GoToCart>Cart (@ShoppingCart.Count())</button>
            </div></div>
        </div>
       
</div>

<div class="mb-3"/>

<input type="text" class="form-control" placeholder="Search for cheese..." @bind="searchTerm" @bind:event="oninput" />

<div class="mb-5" />

@if (cheeses is null)
{
    <p>Loading...</p>
}
else if (!cheeses.Any())
{
    <p>No cheeses found.</p>
}

<div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-5">
    @foreach (var cheese in FilteredCheeses)
    {
        <div class="col">
            <StoreItem Cheese="cheese" />
        </div>
    }
@if (!FilteredCheeses.Any())
{
    <p>No cheeses found.</p>
}
</div>

@code {
    private IEnumerable<Cheese> cheeses;

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }

    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }

    private string searchTerm = "";

    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }
}